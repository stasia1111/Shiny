{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(SmarterPoland)\nlibrary(RColorBrewer)\nlibrary(plotly)\n\ntable<-data.frame(country =\n                    c('Belgium',\n                      'Bulgaria',\n                      'Czech Republic',\n                      'Denmark',\n                      'Germany',\n                      'Estonia',\n                      'Ireland',\n                      'Greece',\n                      'Spain',\n                      'France',\n                      'Croatia',\n                      'Italy',\n                      'Cyprus',\n                      'Latvia',\n                      'Lithuania',\n                      'Luxembourg',\n                      'Hungary',\n                      'Malta',\n                      'Netherlands',\n                      'Austria',\n                      'Poland',\n                      'Portugal',\n                      'Romania',\n                      'Slovenia',\n                      'Slovakia',\n                      'Finland',\n                      'Sweden',\n                      'United Kingdom'), \n                  abbreviation = c('BE',\n                                   'BG',\n                                   'CZ',\n                                   'DK',\n                                   'DE',\n                                   'EE',\n                                   'IE',\n                                   'EL',\n                                   'ES',\n                                   'FR',\n                                   'HR',\n                                   'IT',\n                                   'CY',\n                                   'LV',\n                                   'LT',\n                                   'LU',\n                                   'HU',\n                                   'MT',\n                                   'NL',\n                                   'AT',\n                                   'PL',\n                                   'PT',\n                                   'RO',\n                                   'SI',\n                                   'SK',\n                                   'FI',\n                                   'SE',\n                                   'UK')\n)\n\ntmp_GDP <- getEurostatRaw(kod = \"teina010\", rowRegExp=NULL, colRegExp=NULL, strip.white = TRUE)\ntmp_HICP <- getEurostatRaw(kod = \"teicp000\", rowRegExp=NULL, colRegExp=NULL, strip.white = TRUE)\ntmp_HICP <- tmp_HICP[41:79,]\ntmp_unemployment <- getEurostatRaw(kod = \"teina310\", rowRegExp=NULL, colRegExp=NULL, strip.white = TRUE)\ntmp_unemployment <- tmp_unemployment [254:276,]\ntmp_3_month_interest_rate <- getEurostatRaw(kod = \"teimf040\", rowRegExp=NULL, colRegExp=NULL, strip.white = TRUE)\ntmp_Production_in_industry <- getEurostatRaw(kod = \"teiis080\", rowRegExp=NULL, colRegExp=NULL, strip.white = TRUE)\ntmp_Production_in_industry <-tmp_Production_in_industry[1:36,-ncol(tmp_Production_in_industry)]\nshinyServer(function(input, output) {\n\n  output$checkboxGroupx <- renderUI({\n    indicator <- input$Indicator\n\n    tmp_data <- eval(parse(text=paste0(\"tmp_\",indicator)))\n    tmp_data <- na.omit(tmp_data)\n    country_abbreviations <- function(data){\n      wektor <- c()\n      for (i in 1:nrow(data)){\n        wektor[i] <- substring(data[i,1],nchar(data[i,1])-1, nchar(data[i,1]))\n      }\n      return(wektor)\n    }\n\n    tmp_data$abbreviation <- country_abbreviations(tmp_data)\n    tmp_data <- merge(x = table, y = tmp_data, by = \"abbreviation\", all.y = TRUE)\n    colnames(tmp_data) <- paste0(\"my_\",colnames(tmp_data))\n    countries <- unique(as.character(tmp_data$my_country[!is.na(tmp_data$my_country)]))\n    checkboxGroupInput(inputId = 'Countries', label = 'Choose countries', choices = countries, selected = countries)\n  })\n    \n  output$selectInputx <- renderUI({\n    indicator <- input$Indicator\n    \n    tmp_data <- eval(parse(text=paste0(\"tmp_\",indicator)))\n    tmp_data <- na.omit(tmp_data)\n    \n    colnames(tmp_data) <- paste0(\"my_\",colnames(tmp_data))\n    \n    time <- c()\n    for (i in 1 : ncol(tmp_data)){\n      time[i] <- substr(colnames(tmp_data)[i] , 4, nchar(colnames(tmp_data)[i] ))\n    }\n    time <- time[-1] ### !!!!!!  tu sprawdÅº czy dobry kolumny obcinasz!!! ###\n    \n    selectInput('Time', 'Choose point of time', choices = time)\n  })\n    \n  \n  \n  output$mapPlot <- renderPlotly({\n    \n    indicator <- input$Indicator\n    countries <- input$Countries\n    tmp_data <- eval(parse(text=paste0(\"tmp_\",indicator)))\n    tmp_data <- na.omit(tmp_data)\n    country_abbreviations <- function(data){\n      wektor <- c()\n      for (i in 1:nrow(data)){\n        wektor[i] <- substring(data[i,1],nchar(data[i,1])-1, nchar(data[i,1]))\n      }\n      return(wektor)\n    }\n    \n    tmp_data$abbreviation <- country_abbreviations(tmp_data)\n    tmp_data <- merge(x = table, y = tmp_data, by = \"abbreviation\", all.y = TRUE)\n    tmp_data <- na.omit(tmp_data)\n    colnames(tmp_data) <- paste0(\"my_\",colnames(tmp_data))\n    tmp_data =  tmp_data[tmp_data$my_country %in% countries,]    \n    \n    state_codes = as.character(tmp_data$my_country[!is.na(tmp_data$my_country)])\n    value = eval(parse(text=paste0(\"tmp_data$my_\",input$Time)))\n    #pop =  tmp_GDP$my_2012Q4[!is.na(tmp_GDP$my_country)]\n    df_states = data.frame(state_codes, value)\n    \n    g <- list(\n      scope = \"europe\",\n      showframe = FALSE,\n      showcoastlines = FALSE,\n      projection = list(type = 'Mercator')\n    )\n    \n    plot_ly(df_states, z=value, locations=state_codes,  text=paste0(df_states$state_codes, '<br>', indicator, ': ', df_states$value) ,\n            type=\"choropleth\", locationmode = 'country names', colors = 'Purples', filename=\"stackoverflow/simple-choropleth\") %>%\n      layout(title = paste0('Eurostat - ',indicator),\n             geo = g)\n    \n#      output$dataset <- renderTable({\n#        indicator <- input$Indicator\n#        tmp_data <- eval(parse(text=paste0(\"tmp_\",indicator)))\n#      })\n    \n  })\n\n})\n",
    "created" : 1451825998598.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2652727343",
    "id" : "4510DA7B",
    "lastKnownWriteTime" : 1451826567,
    "path" : "~/GitHub/Shiny/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}